# Compile Intel(R) Gaussian & Neural Accelerator (Intel(R) GNA) into Linux Kernel 6.5.3
# 
# First, ensure that you have the Linux 6.5.3 sources available.

# Create a symbolic link to the Linux 6.5.3 directory
ln -s linux-6.5.3 b

# Apply the necessary patches from the linux-kernel-gna-patch directory
# These patches are generated with `git format-patch` and expect a patch level of `-p1`.
for i in linux-kernel-gna-patch/drm_gna/*.patch; do
    patch -p1 < "$i"
done
# Example output:
# patching file Documentation/gpu/drivers.rst
# patching file Documentation/gpu/gna.rst

# Navigate into the Linux 6.5.3 directory
cd linux-6.5.3

# Clean up any existing build artifacts
make mrproper
make clean

# Option 1: Copy and unzip the existing kernel configuration
cp /proc/config.gz .
gunzip config.gz
cp config .config

# OR Option 2: Copy a predefined kernel configuration
# copy linux-kernel-gna-patch/kernel.config /usr/src/linux-6.5.3/.config

# Open menu configuration for kernel
make menuconfig

# Navigate to Device Drivers > Graphics Support > 
# Intel(R) Gaussian & Neural Accelerator (Intel(R) GNA) and add it as a module or built into the kernel

# Compile the kernel
make -j $cores

# Install the kernel modules
make modules_install

# Copy the built kernel image to the boot directory
cp arch/x86/boot/bzImage /boot/vmlinux_gna

# Generate an initial ramdisk
mkinitcpio ... # your options against 6.5.3 kernel 

# Update the grub configuration
update-grub  # Note: The original said 'grub.cgh' which is likely a typo

# Reboot your system
reboot

# After reboot, check for loaded modules
lsmod | grep gna

# For more details on your GNA hardware
lspci | grep -i gna

# Special note on Kernel config
# Kernel .config should have CONFIG_DRM_GNA=m

# Get the GNA repository with the fixed headers for helper libraries 
git clone https://github.com/akadata/gna/tree/fix_drm_headers

# Checkout the fix_drm_headers branch and follow its instructions
cd build
cmake ../
make 
make install


# Acknowledgments
# Compliments to : https://github.com/ctrlaltca/gna/tree/fix_drm_h who made the header fix

# Important: 
# https://github.com/intel/gna does not compile on Arch Linux.

# Note on additional patch set:
# Another patch found in intel_gna set gives drivers/misc/intel_gna but is incompatible with v6.5.x kernel. It requires v5.x.x kernel.

# Build kernel module and userland
make

# Install kernel module and userland tool
sudo make install

# Run basic test
make test

## Building with DKMS

The module can be rebuilt automatically for arbitrary kernels using
[DKMS](https://github.com/dell/dkms). After extracting this repository so
that `dkms.conf` is in the top level directory:

1. Register the source with DKMS:

   ```bash
   sudo dkms add $(pwd)
   ```

   This creates the `gna/0.1` entry under `/usr/src`.

2. Build and install for a specific kernel (replace `<kernel_version>` with
   the desired version, e.g. the output of `uname -r`):

   ```bash
   sudo dkms build gna/0.1 -k <kernel_version>
   sudo dkms install gna/0.1 -k <kernel_version>
   ```

   Ensure the headers for the target kernel are installed.

3. To uninstall the module for a given kernel:

   ```bash
   sudo dkms remove gna/0.1 -k <kernel_version>
   ```

### Kernel Version Notes

This driver targets Linux 6.x kernels and has been tested with 6.5 and
6.12 releases.  Kernels in the 5.x series use a different upstream driver
(`drivers/misc/intel_gna`) and are not compatible with these sources
without significant backports.  Newer 6.x kernels may require minor
adjustments if DRM or core APIs change.

### Troubleshooting

* **Missing symbols or API changes** – If `dkms build` reports undefined
  symbols or missing structure fields, verify that the target kernel is
  supported and its headers are installed.  Compare the failing symbol
  with the kernel sources and update the driver to match any API changes.
* **Missing configuration options** – Confirm that the kernel is built with
  `CONFIG_DRM` and `CONFIG_DRM_GNA` enabled (either built in or as a
  module).  Absent options can cause the module to fail to link.
* **Stale builds** – Clean previous DKMS builds when switching kernels:

  ```bash
  sudo dkms remove gna/0.1 --all
  ```
